var net = require('net');

var commandReg = new Buffer([0x65, 0x00]);
var length = new Buffer([0x04, 0x00]);
var sessionHandle = new Buffer([0x00, 0x00, 0x00, 0x00]);
var enipStatus = new Buffer([0x00, 0x00, 0x00, 0x00]);
var SenderContext = new Buffer([0x65, 0x66, 0x6c, 0x65, 0x78, 0x00, 0x00, 0x00]);
var options = new Buffer([0x00, 0x00, 0x00, 0x00]);
var protocolVersion = new Buffer([0x01, 0x00]);
var optionFlags = new Buffer([0x00, 0x00]);

//connection manager
var commandSend = new Buffer([0x6f, 0x00]);
var cmStatus = new Buffer([0x00, 0x00, 0x00, 0x00]);
var interfaceHandle = new Buffer([0x00, 0x00, 0x00, 0x00]);
var timeOut = new  Buffer([0x05, 0x00]);
var itemCount = new Buffer([0x02, 0x00]);
var TypeId = new Buffer([0x00, 0x00]);
var TypeLength = new Buffer([0x00, 0x00]); //length of CIP header
var TypeId2 = new Buffer([0xb2, 0x00]);
var TypeLength2 = new Buffer([0x32, 0x00]);
var service = new Buffer([0x54]);

//CIP protocol
var commandUnitData = new Buffer([0x70, 0x00]);
var cipStatus = new Buffer([0x00, 0x00, 0x00, 0x00]);
var cipTimeOut = new Buffer([0x00, 0x00]);
var connectionId = [];

var csdBuffer = Buffer.concat([interfaceHandle, timeOut, itemCount, TypeId, TypeLength, TypeId2, TypeLength2, service]);
var cipbuffer = new Buffer([0x02, 0x20, 0x06, 0x24, 0x01, 0x00, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0xdb, 0xe5, 0x41, 0x53, 0x01, 0x02, 0x04, 0x08, 0x02, 0x00, 0x00, 0x00, 0x80, 0x84, 0x1e, 0x00, 0xf4, 0x43, 0x80, 0x84, 0x1e, 0x00, 0xf4, 0x43, 0xa3, 0x04, 0x01, 0x00, 0x20, 0x02, 0x24, 0x01, 0x2c, 0x01]);

var cipCMbuffer = Buffer.concat([csdBuffer, cipbuffer]);

var cipBuffer = new Buffer([0x02, 0x00, 0xa1, 0x00, 0x04, 0x00, 0x11, 0x40, 0xd3, 0xff, 0xb1, 0x00, 0x16, 0x00, 0x62, 0x00, 0x52, 0x06, 0x91, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x43, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00]);
//ENIP
var regBuffer = Buffer.concat([commandReg, length, sessionHandle, enipStatus, SenderContext, options, protocolVersion, optionFlags]);
//CIP CM
var cmBuffer = Buffer.concat([commandSend,length, sessionHandle, cmStatus, SenderContext, options, cipCMbuffer]);
//CIP
var buffer = Buffer.concat([commandUnitData, length, sessionHandle, cipStatus, SenderContext, options, interfaceHandle, cipTimeOut, cipBuffer]);
//CIP Multiple Service
var MultiBuffer = new Buffer([0x70, 0x00, 0x30, 0x00, 0x6a, 0x2a, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x66, 0x6c, 0x65, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xa1, 0x00, 0x04, 0x00, 0x11, 0x40, 0xd3, 0xff, 0xb1, 0x00, 0x1c, 0x00, 0x63, 0x00, 0x0a, 0x02, 0x20, 0x02, 0x24, 0x01, 0x01, 0x00, 0x04, 0x00, 0x4c, 0x06, 0x91, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x43, 0x4c, 0x00]);//connectionID

var socket = new net.Socket({readable: true, writable: true});
socket.connect(44818, "172.16.1.40", function() {
	remoteEP = socket.localPort;
	socket.write(regBuffer);
});
var count = 2;
socket.on('data', function(data) {
	console.log("command " + data[0]);
	switch(data[0]) {
		case 101:
			for(i=4; i<8;i++) {
				buffer[i] = data[i];
				cmBuffer[i] = data[i];
			}
			cmBuffer[2] = cipCMbuffer.length;
			socket.write(cmBuffer);
			break;
		case 111:
			buffer[2] = 42;
			var x = 36;
			var j = 0;
			for(i=44;i<48;i++) {
				buffer[x] = data[i];
				connectionId[j] = data[i];
				j++;
				x++;
			}
			socket.write(buffer);
			break;
		case 112:
			if (count % 2 == 0) {
				console.log('cip');
				socket.write(buffer);
			}else{
				console.log('multi');
				for(i=4; i<8;i++) {//sessionHandle
					MultiBuffer[i] = data[i];
				}
				var m = 0;
				for(x=36;x<40;x++) {//connectionID
					MultiBuffer[x] = connectionId[m];
					m++;
				}
				socket.write(MultiBuffer);
			}

			count++;
			break;
		default:
			console.log('default');
			break;
	}
});
